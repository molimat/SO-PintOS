
			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Matheus Molin <matheusmolin@poli.ufrj.br>
Jonathan Alcantara <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

void check_ticks(struct thread *t, void *aux); /* Function that searchs for tick times on time blocked threads and descreases it each time it verifies. */
int64_t blocked_time; 							/* Blocked time used to put a thread to sleep */

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

	Foi criado um atributo blocked_time que vai definir por quantos ticks esta thread vai permancer bloqueada.
	Enquanto a thread estiver bloqueada, ela não voltara para a lista de execućao, poupando processamento.
	A medida que o interrupt handler executa, este tambem chama uma funcão foreach que irá controlar o tempo de bloqueio dessas threads.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

	Ele percorre somente as threads bloqueadas, não precisando passar por todas. Isso ocorre devido a um if presente no check_ticks

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

	A funcão real_time_sleep que é quem controla a chamada da timer_sleep possui uma trava de interrupcão que impede que varias threads possam interromper esse processo.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

	Não acontece isso pois as interrupcões sao desligadas durante o processo de timer_sleep.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

	Pela facilidade de implementacão e por ser eficaz com relacão a resolucão do problema de busy-wait. 

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Funcao que  foi implementada para varrer a lista de ready_threads e comparar suas prioridades. */
	bool compare_priority (const struct list_elem *t,const struct list_elem *e,void *);

/* Sequencia de funcoes que retorna a thread da ready_list com maior prioridade, permitindo que esta thread seja priorizada na execuca0*/
	struct list_elem *higher_priority = list_max (&sema->waiters, compare_priority, NULL); 
	list_remove (higher_priority);
	thread_unblock (higher_priority,struct thread, elem));

/* Ao mudar a prioridade de uma thread, teremos um yield que ira verificar se agora existe uma thread com prioridade maior na lista de espera*/
	thread_set_priority (int new_priority);

/* a cada thread criada verifica-se se esta possui uma prioridade maior do que a thread em execucão, se tiver, ela toma o lugar da thread atual. */
	tid_t thread_create (const char *name, int priority, thread_func *function, void *aux);

/* para o Priority Sched */
	int highest_priority;
	struct list_elem elem;
	struct list locks_acquired; /* Vai ser a lista de locks que a thread possui */
	struct lock *lock_pending; /* vai conter o ponteiro pra lock pendente para continuar a execucão */
	bool compare_lock_priority (const struct list_elem *e, const struct list_elem *t, void *); /* mais um comparador de prioridade dentro só que dentro da lista de lockers */



>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Esse processo ocorre com a funcao compare priority que permite verificar as prioridades dentro de uma lista, criando um ponteiro para
a thread de maior prioridade nesta lista. Com isso é possível retirar exatamente esta thread, esteja ela presente na lista de semaforos, ou na lista de threads ready para execucão.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
